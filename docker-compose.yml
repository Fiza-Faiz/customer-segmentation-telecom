version: '3.8'

services:
  # Customer Segmentation API Service
  customer-segmentation-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: customer-segmentation-api
    ports:
      - "8080:8080"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/output/models
    volumes:
      - ./output:/app/output
      - ./data:/app/data:ro  # Read-only data volume
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - segmentation-network

  # Optional: Redis for caching (for production scaling)
  redis:
    image: redis:7-alpine
    container_name: customer-segmentation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - segmentation-network
    profiles:
      - with-cache

  # Optional: Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: customer-segmentation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if available)
    depends_on:
      - customer-segmentation-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - segmentation-network
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  segmentation-network:
    driver: bridge
